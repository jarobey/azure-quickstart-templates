#!/bin/bash
CURRENT_VERSION_MARKER='Azure_1'
DB_ADMIN_USER=$2
DB_ADMIN_PASS=$3
SCM_PWD=$DB_ADMIN_PASS
DB_HOST=$1
DB_PORT=3306
DB_HOSTPORT="$DB_HOST:$DB_PORT"
DB_PROP_FILE=/etc/cloudera-scm-server/db.properties
MGMT_DB_PROP_FILE=/etc/cloudera-scm-server/db.mgmt.properties

fail_or_continue()
{
    local RET=$1
    local STR=$2

    if [[ $RET -ne 0 ]]; then
        echo "$STR, giving up"
        exit $RET
    fi
}

execute_sql()
{
  mysql -h $DB_HOST -P $DB_PORT -u $DB_ADMIN_USER -p$DB_ADMIN_PASS -e "$1"
}

create_database()
{
  local DBNAME=$1
  local PW=$2
  local USER=DBNAME
   #if pass in the third parameter, us it as the ROLE name
  if ! [ -z "$3" ];then
    local USER=$3
  fi
  echo $USER

  echo "create database $DBNAME DEFAULT CHARACTER SET utf8;"
  execute_sql "create database $DBNAME DEFAULT CHARACTER SET utf8;"
  fail_or_continue $? "Unable to create database $DBNAME"

  echo "grant all on $DBNAME.* TO '$DBNAME'@'%' IDENTIFIED BY '$PW';"
  execute_sql "grant all on $DBNAME.* TO '$USER'@'%' IDENTIFIED BY '$PW';"
  fail_or_continue $? "Unable to grant priveleges on database $DBNAME to $DBNAME"
}

# Returns 0 if the given DB exists in the DB list file.
db_exists()
{
  execute_sql "show databases;" | grep -e "^$1$" 1>/dev/null 2>&1
}

create_random_password()
{
  perl -le 'print map { ("a".."z", "A".."Z", 0..9)[rand 62] } 1..10'
}

# Creates the SCM database, if it doesn't exist yet.
create_scm_db()
{
  if db_exists scm; then
    return 0
  fi

  local PW=$1
  create_database scm $PW

  orig_umask=$(umask)
  umask 0077
  echo "Creating SCM configuration file: $DB_PROP_FILE"
  cat > $DB_PROP_FILE << EOF
# Auto-generated by `basename $0`
#
# $NOW
#
# These are database settings for CM Manager
#
com.cloudera.cmf.db.type=mysql
com.cloudera.cmf.db.host=$DB_HOSTPORT
com.cloudera.cmf.db.name=scm
com.cloudera.cmf.db.user=scm
com.cloudera.cmf.db.password=$PW
EOF

  umask $orig_umask
  fail_or_continue $? "Error creating file $DB_PROP_FILE"
  echo "Created db properties file $DB_PROP_FILE"
}

# Creates a database for a specific role, if it doesn't exist yet.
create_mgmt_role_db()
{
  # $1 is the MgmtServiceHandler.RoleNames Enum value
  # $2 is the database name.
  local role=$1
  local db=$2
  if db_exists $db; then
    return 0
  fi

  echo "Creating DB $db for role $role"
  local pw=`create_random_password`
  create_database $db $pw

  # Write the prop file header.
  if [[ ! -f $MGMT_DB_PROP_FILE ]]; then
    orig_umask=$(umask)
    umask 0077
    cat > $MGMT_DB_PROP_FILE << EOF
# Auto-generated by `basename $0`
#
# $NOW
#
# These are database credentials for databases
# created by "cloudera-scm-server-db" for
# Cloudera Manager Management Services,
# to be used during the installation wizard if
# the embedded database route is taken.
#
# The source of truth for these settings
# is the Cloudera Manager databases and
# changes made here will not be reflected
# there automatically.
#
EOF

    umask $orig_umask
    fail_or_continue $? "Error creating file $MGMT_DB_PROP_FILE"
  fi

  local PREFIX="com.cloudera.cmf.$role.db"

  # Hue Database Type = mysql
  # Hue Database Hostname = host
  # Hue Database Port = 3306
  # Hue Database Username = hue
  # Hue Database Password = secretpassword
  # Hue Database Name = hue

  # Append the role db properties to the mgmt db props file.
  cat >> $MGMT_DB_PROP_FILE <<EOF
$PREFIX.type=mysql
$PREFIX.host=$DB_HOSTPORT
$PREFIX.name=$db
$PREFIX.user=$db
$PREFIX.password=$pw
EOF
  fail_or_continue $? "Error updating file $MGMT_DB_PROP_FILE"

  echo "Created DB for role $role"
}

create_hive_metastore()
{
  local role='HIVEMETASTORESERVER'
  local db='metastore'
  local hive='hive'
  if db_exists $db; then
    return 0
  fi

  echo "Creating DB $db for user $hive"
  local pw=`create_random_password`
  create_database $db $pw $hive

  # Write the prop file header.
  if [[ ! -f $MGMT_DB_PROP_FILE ]]; then
    orig_umask=$(umask)
    umask 0077
    cat > $MGMT_DB_PROP_FILE << EOF
# Auto-generated by `basename $0`
#
# $NOW
#
# These are database credentials for databases
# created by "cloudera-scm-server-db" for
# Cloudera Manager Management Services,
# to be used during the installation wizard if
# the embedded database route is taken.
#
# The source of truth for these settings
# is the Cloudera Manager databases and
# changes made here will not be reflected
# there automatically.
#
EOF

    umask $orig_umask
    fail_or_continue $? "Error creating file $MGMT_DB_PROP_FILE"
  fi

  local PREFIX="com.cloudera.cmf.$role.db"

  # Append the role db properties to the mgmt db props file.
  cat >> $MGMT_DB_PROP_FILE <<EOF
$PREFIX.type=mysql
$PREFIX.host=$DB_HOSTPORT
$PREFIX.name=$db
$PREFIX.user=$hive
$PREFIX.password=$pw
EOF
  fail_or_continue $? "Error updating file $MGMT_DB_PROP_FILE"
}

NOW=$(date +%Y%m%d-%H%M%S)

create_scm_db $SCM_PWD
create_mgmt_role_db ACTIVITYMONITOR amon
create_mgmt_role_db REPORTSMANAGER rman
create_mgmt_role_db NAVIGATOR nav
create_mgmt_role_db NAVIGATORMETASERVER navms
create_mgmt_role_db OOZIE oozie
create_mgmt_role_db SENTRYSERVER sentry
create_mgmt_role_db HUE hue
create_hive_metastore